// DOM Content Loaded
document.addEventListener('DOMContentLoaded', function() {
    // Mobile menu toggle
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    
    hamburger.addEventListener('click', function() {
        hamburger.classList.toggle('active');
        navMenu.classList.toggle('active');
    });
    
    // Close mobile menu when clicking on a link
    document.querySelectorAll('.nav-link').forEach(n => n.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
    }));
    
    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                window.scrollTo({
                    top: targetElement.offsetTop - 80,
                    behavior: 'smooth'
                });
            }
        });
    });
    
    // Intersection Observer for animations
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                if (entry.target.classList.contains('animate-text')) {
                    entry.target.classList.add('visible');
                }
                
                if (entry.target.classList.contains('skill-progress')) {
                    const width = entry.target.getAttribute('data-width');
                    entry.target.style.width = width;
                }
                
                if (entry.target.classList.contains('stat-number')) {
                    animateValue(entry.target, 0, parseInt(entry.target.getAttribute('data-target')), 2000);
                }
            }
        });
    }, observerOptions);
    
    // Observe elements
    document.querySelectorAll('.animate-text').forEach(el => {
        observer.observe(el);
    });
    
    document.querySelectorAll('.skill-progress').forEach(el => {
        observer.observe(el);
    });
    
    document.querySelectorAll('.stat-number').forEach(el => {
        observer.observe(el);
    });
    
    // Number animation function
    function animateValue(obj, start, end, duration) {
        let startTimestamp = null;
        const step = (timestamp) => {
            if (!startTimestamp) startTimestamp = timestamp;
            const progress = Math.min((timestamp - startTimestamp) / duration, 1);
            obj.innerHTML = Math.floor(progress * (end - start) + start);
            if (progress < 1) {
                window.requestAnimationFrame(step);
            }
        };
        window.requestAnimationFrame(step);
    }
    
    // Form submission
    const contactForm = document.querySelector('.contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Simple form validation
            let isValid = true;
            const inputs = this.querySelectorAll('input, textarea');
            
            inputs.forEach(input => {
                if (!input.value.trim()) {
                    isValid = false;
                    input.style.borderColor = 'red';
                } else {
                    input.style.borderColor = '#e0e0e0';
                }
            });
            
            if (isValid) {
                // Simulate form submission
                this.innerHTML = '<p class="success-message">Thank you for your message! I will get back to you soon.</p>';
            }
        });
    }
    
    // Add floating petals periodically
    function addFloatingPetals() {
        const floralBg = document.querySelector('.floral-bg');
        const petalCount = 5;
        
        for (let i = 0; i < petalCount; i++) {
            setTimeout(() => {
                const petal = document.createElement('div');
                petal.classList.add('petal');
                
                // Random properties
                const size = Math.random() * 10 + 5;
                const left = Math.random() * 100;
                const animationDelay = Math.random() * 20;
                const animationDuration = Math.random() * 10 + 20;
                
                petal.style.width = `${size}px`;
                petal.style.height = `${size}px`;
                petal.style.left = `${left}%`;
                petal.style.animationDelay = `${animationDelay}s`;
                petal.style.animationDuration = `${animationDuration}s`;
                
                floralBg.appendChild(petal);
                
                // Remove petal after animation completes
                setTimeout(() => {
                    floralBg.removeChild(petal);
                }, (animationDelay + animationDuration) * 1000);
            }, i * 1000);
        }
    }
    
    // Add petals every 30 seconds
    setInterval(addFloatingPetals, 30000);
    
    // Initial petals
    addFloatingPetals();
});
